from django.db import models

# from django.contrib.auth.models import User
import uuid #generate unique

from django.conf import settings
#ROLE
from django.contrib.auth.models import AbstractUser

    
# USER ROLE
ROLES = (
    (1, 'Company'),
    (2, 'Investor')
)

class User(AbstractUser):
    role = models.PositiveSmallIntegerField(choices=ROLES, default=1)
    category = models.CharField(max_length=255, blank=True, null=True)
    reputation = models.CharField(max_length=255, blank=True, null=True)

# class User(AbstractUser):
#     is_company = models.BooleanField('company', default=False)
#     is_investor = models.BooleanField('investor', default=False)
#     is_admin = models.BooleanField('admin', default=False)

#model for password reset -> make migrations after update
class PasswordReset(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)

    #id generated by default (unique id)
    reset_id = models.UUIDField(default=uuid.uuid4, unique=True, editable=False)
    created_when = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"Password reset for {self.user.username} at {self.created_when}"

#python manage.py makemigrations
#Migrations for 'base':
#   base\migrations\0001_initial.py
#     + Create model PasswordREset

#python manage.py migrate
# Operations to perform:
#   Apply all migrations: admin, auth, base, contenttypes, sessions
# Running migrations:
#   Applying base.0001_initial... OK